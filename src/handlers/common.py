import logging

import requests
from telegram import Update
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)


class BotHandlers:

    async def start(self, update: Update, _context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Yandex GPT.\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/reset - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n"
            "/history - –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏\n"
            "/rag XXX - –∏—Å–∫–∞—Ç—å —Ç–µ–∫—Å—Ç XXX –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Julia –∏ –¥–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò –Ω–∞ —ç—Ç–æ—Ç –•–•–•"
        )

    async def reset_history(self, update: Update, _context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset - —Å–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞"""
        user_id = update.effective_user.id
        requests.delete(f"/history/{user_id}", timeout=5)
        await update.message.reply_text(
            "‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥!"
        )

    async def show_history_info(
        self, update: Update, _context: ContextTypes.DEFAULT_TYPE
    ):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞"""
        user_id = update.effective_user.id
        history = requests.get(f"/history/{user_id}", timeout=5).json()

        if not history:
            await update.message.reply_text("üì≠ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç–∞")
        else:
            user_messages = sum(1 for msg in history if msg.role == "user")
            assistant_messages = sum(1 for msg in history if msg.role == "assistant")

            await update.message.reply_text(
                f"üìö –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n"
                f"–í–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {user_messages}\n"
                f"–û—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞: {assistant_messages}\n"
                f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(history)}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏"
            )

    async def rag_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /rag"""
        user_message = " ".join(context.args)
        user_id = update.effective_user.id

        if not user_message.strip():
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /rag"
            )
            return

        try:
            await context.bot.send_chat_action(
                chat_id=update.effective_chat.id, action="typing"
            )

            response = requests.post(
                f"/rag/{user_id}", {"message": user_message}, timeout=5
            )

            await update.message.reply_text(response.json())

        except Exception as e:
            logger.error("Error handling /rag command: %s", str(e))
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_message = update.message.text
        user_id = update.effective_user.id
        username = update.effective_user.username or f"user_{user_id}"

        if not user_message.strip():
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å")
            return

        try:
            logger.info(
                "Processing message from %s (ID: %s): %s...",
                username,
                user_id,
                user_message[:50],
            )

            await context.bot.send_chat_action(
                chat_id=update.effective_chat.id, action="typing"
            )

            response = requests.post(
                f"/gpt/{user_id}", {"message": user_message}, timeout=5
            )
            await update.message.reply_text(response.json())

        except Exception as e:
            logger.error("Error handling message from %s: %s", username, str(e))
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    @staticmethod
    async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error("Update %s caused error %s", update, context.error)
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
